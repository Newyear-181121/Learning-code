package com.mooc.unit_3.迷宫问题;

/**
 *  迷宫 实现
 *      要求，用链表栈实现，有一个方向属性。
 *      起点 0,0，   终点 7,8
 *
 *      思路，1.  判断这个节点的下个方向可不可以走，可以走就入栈，然后到下个点，并把走过的点置6
 *              如果不可以走，换一个反向再判断，
 *              所有方向都不可以走，（四个方向都不是0）就把这个节点置5，然后返回上一个节点。
 */
public class MyDemo {
    int[][] maze = {{1,1,0,0},{1,1,1,0},{1,0,0,0},{1,1,1,1}};
    int[][] maze2 ={{0,0,1,0,0,0,1,0},
            {0,0,1,0,0,0,1,0},
            {0,0,0,0,1,1,0,1},
            {0,1,1,1,0,0,1,0},
            {0,0,0,1,0,0,0,0},
            {0,1,0,0,0,1,0,1},
            {0,1,1,1,1,0,0,1},
            {1,1,0,0,0,1,0,1},
            {1,1,0,0,0,0,0,0}};

    /**
     * 判断，当前节点，能否继续走。
     *      方向从 右边开始，顺时针判断， 右，下，左，上， 对应 1,2,3,4。
     *      对应方向的下个节点，的坐标，用另一个方法提供。
     */
    public void isAble(StackNode node){
        if ( node.x == 7 && node.y == 8){ // 判断是不是终点。
            return ;
        } else{

        }
    }


    /**
     *
     * @param node  当前节点
     */
    public int getx(StackNode node){
        return 0;
    }


}
